{"version":3,"sources":["TaskCard.js","TaskCardEntry.js","App.js","Login.js","serviceWorker.js","index.js"],"names":["TaskCard","props","handleChange","id","event","updated","title","target","value","description","text","priority_text","handleDateChange","date","moment","format","handleSubmit","data","buttonCallback","setState","show","handleDone","handleMoreTime","handleClose","handleEdit","handleDelete","preventDefault","state","console","log","this","className","z","hidden","Card","bg","style","width","Header","Title","controlId","Text","Body","ButtonToolbar","Button","variant","margin","onClick","Modal","onHide","Form","Group","Control","autoFocus","type","placeholder","onChange","Label","defaultValue","e","name","as","rows","React","Component","TaskCardEntry","dueDate","priority","fetch","JSON","stringify","then","window","location","reload","cancel","Date","App","task_head","tasks","fetchTasks","method","res","json","cards","i","length","slice","button_code","removeTopTask","body","completed","headers","updateFrontCard","num","push","b_id","handleButton","renderTaskCard","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47b54b02.chunk.js","sourcesContent":["import React from 'react';\nimport {Card} from 'react-bootstrap';\nimport {Button, ButtonToolbar} from 'react-bootstrap';\nimport {Modal} from 'react-bootstrap';\nimport {Form, FormGroup, ControlLabel, FormControl, inputRef, row, col, Col} from 'react-bootstrap';\nimport DatePicker from 'react-datepicker'\nimport TimePicker from 'rc-time-picker';\nimport moment from 'moment';\nimport 'rc-time-picker/assets/index.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './TaskCard.css'\n\nclass TaskCard extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tshow: false,\n\t\t};\n\t\t\n\t\tthis.updated = {\n\t\t\ttitle: \"\",\n\t\t\tdate: new moment().format('MM-DD-YYYY'),\n\t\t\tpriority_text: 'Low',\n\t\t\tdescription: \"\",\n\t\t};\n    }\n\t\n\t\n\thandleChange = (id, event) => {\n\t\tif (id === 'title'){\n\t\t\tthis.updated.title = event.target.value;\n\t\t}\n\t\tif (id === 'description'){\n\t\t\tthis.updated.description = event.target.value;\n\t\t}\n\t\tif (id === 'priority'){\n\t\t\tlet text = \"\";\n\t\t\tswitch(event.target.value){\n\t\t\t\tcase \"0\":\n\t\t\t\t\ttext = 'Low';\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"1\":\n\t\t\t\t\ttext = 'Medium';\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"2\":\n\t\t\t\t\ttext = 'High';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttext = 'Medium';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.updated.priority_text = text;\n\t\t}\n\t}\n\t\n\thandleDateChange = event => {\n\t\tthis.updated.date = moment(event.target.value).format(\"MM-DD-YYYY\");\n\t}\n  \n\thandleSubmit = event => {\n    this.updated.id = this.props.data.id;\n\t\tthis.props.buttonCallback(3, this.updated);\n\t\tthis.setState({show: false});\n\t}\n  \n\t\n\t// On click for task complete\n\thandleDone = event => {\n\t\t// This is for testing, remove \n\t\tthis.props.buttonCallback(0, this.props.data.id);\n\t\t\n\t}\n\t\n\thandleMoreTime = event => {\n\t\t\n\t\t\n\t}\n\t\n/*\thandleEdit = event => {\n\t\t\n\t\t\n\t}\n\t*/\n\thandleClose = () => {\n\t\tthis.setState({show: false});\n\t}\n\thandleEdit = () => {\n\t\tthis.setState({show: true});\n\t}\n\n\t\n\t\n\t// deletes the current task on click\n\thandleDelete = event => {\n\t\tevent.preventDefault();\n\t\tthis.props.buttonCallback(4, this.props.data.id);\n\t//\tfetch(\"/deletetask\",\n\t\t//{\n\t\t/*\t\"method\": \"POST\",\n\t\t\t\"body\": JSON.stringify(\n\t\t\t{\n\t\t\t\t\"title\": this.state.taskTitle,\n\t\t\t\t\"dueDate\": dueDate,\n\t\t\t\t\"priority\": this.state.priority,\n\t\t\t\t\"discription\": this.state.description,\n\t\t\t\t\"completed\": false,\n\t\t\t\t\"uhoh\": false,\n\t\t\t\t\"doLater\": false,\n\t\t\t}),\n\t\t\t\"headers\": {\"Content-Type\": \"application/json\"}\n\t\t})\n\t\t.then(console.log)\n\t\t*/\n\t}\n\t\n\t\n\n\trender() {\n\t\t\n\t\tconsole.log(this.props.data.title);\n\t\tthis.updated.title = this.props.data.title;\n\t\tthis.updated.description = this.props.data.description;\n\t\tthis.updated.priority_text = this.props.data.priority_text;\n\t\tthis.updated.date = this.props.data.date;\n\t\treturn (\n\t\t\t<div className={'card-z-'+this.props.data.z+\" w-100 row justify-content-center align-items-center\" + (this.props.data.hidden ? \" hidden\": \"\")}>\n\t\t\t<Card bg={this.props.data.priority_text} text=\"secondary\" style={{ width: '30rem' }}>\n\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t<Card.Title className = \"text-center\" controlId=\"title\">{this.props.data.title}</Card.Title>\n\t\t\t\t\t\t<Card.Text className = \"text-right\" controlId=\"dueDate\">{this.props.data.date}</Card.Text>\n\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t<div className=\"mb-3 text-center\">{this.props.data.priority_text}</div>\n\t\t\t\t\t<Card.Text className = \"text-justify\" controlId = 'discription'>{this.props.data.description}</Card.Text>\n\t\t\t\t\t<ButtonToolbar>\n\t\t\t\t\t\t<Button variant=\"outline-success\" style={{ margin: '5px' }} onClick = {this.handleDone}>Done</Button>\n\t\t\t\t\t\t<Button variant=\"outline-secondary\" style={{ margin: '5px' }} onClick = {this.handleEdit}>Edit</Button>\n\t\t\t\t\t\t<Button variant=\"outline-danger\" style={{ margin: '5px' }} onClick = {this.handleDelete}>Delete</Button>\n\t\t\t\t\t</ButtonToolbar>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t\t\n\t\t\t\t <Modal  show={this.state.show} onHide={this.handleClose}>\n\t\t\t\t\t<div> \n\t\t\t\t\t\t<Card bg=\"info\" text=\"secondary\" style={{ width: '30rem' , margin: '10px'}}>\n\t\t\t\t\t\t   <Card.Header>\n\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t\t<Form.Group controlId=\"title\">\n\t\t\t\t\t\t\t\t\t\t<Form.Control \n\t\t\t\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder={this.props.data.title}\n\t\t\t\t\t\t\t\t\t\t\tonChange={event => this.handleChange(\"title\", event)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t<Form.Group className =\"text-right\" controlId = \"date\">\n\t\t\t\t\t\t\t\t\t<Form.Label>Select a Due Date: </Form.Label>\n\t\t\t\t\t\t\t\t\t<input type = 'date' defaultValue = {this.updated.date} onChange={this.handleDateChange}/>\n\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t   </Card.Header>\n\t\t\t\t\t\t  <Card.Body>\n\t\t\t\t\t\t\t<Form>\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div className = \"mb-3 text-center\" onChange={(e) => this.handleChange('priority', e)}>\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" value='0' name=\"priority\" style={{ margin: '5px' }}/> Low\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" value='1' name=\"priority\" style={{ margin: '5px' }}/> Medium\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" value='2' name=\"priority\" style={{ margin: '5px' }}/> High\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t<Form.Group controlId=\"description\">\n\t\t\t\t\t\t\t\t\t<Form.Label>Task Description</Form.Label>\n\t\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\t\tas=\"textarea\"\n\t\t\t\t\t\t\t\t\t\trows=\"4\"\n\t\t\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\t\t\tplaceholder={this.props.data.description}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => this.handleChange(\"description\", e)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t<ButtonToolbar>\n\t\t\t\t\t\t\t\t<Button variant=\"outline-secondary\" style={{ margin: '5px' }} type = \"submit\" onClick = {this.handleSubmit}> Confirm </Button>\n\t\t\t\t\t\t\t\t<Button variant=\"outline-secondary\" style={{ margin: '5px' }}onClick = {this.handleClose}>Cancel</Button>\n\t\t\t\t\t\t\t</ButtonToolbar>\n\t\t\t\t\t\t  </Card.Body>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t  </Modal>\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n\t\t\n\t\t\n\t}\n\n\n}\n\nexport default TaskCard;\n","import React from 'react';\nimport {Card} from 'react-bootstrap';\nimport {Modal} from 'react-bootstrap';\nimport {Button, ButtonToolbar} from 'react-bootstrap';\nimport {Form, FormGroup, ControlLabel, FormControl, inputRef, row, col, Col} from 'react-bootstrap';\nimport DatePicker from 'react-datepicker'\n//import TimePicker from 'rc-time-picker';\nimport moment from 'moment';\n//import 'rc-time-picker/assets/index.css';\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './TaskCardEntry.css';\n\nclass TaskCardEntry extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tshow: false,\n\t\t}\n\t\tthis.updated = {\n\t\t\ttitle: \"\",\n\t\t\tdueDate: new Date(),\n\t\t\tpriority: 0,\n\t\t\tdescription: \"\",\n\t\t};\n    }\n\t\n\t// handle the date day changing (seperate from the rest of the data changing\n\thandleDateChange = date => {\n\t\tthis.updated.dueDate = moment(date.target.value).format(\"MM-DD-YYYY\")\n\t};\n  \n\t\n  \n    // default data updating\n\thandleChange = (id, event) => {\n\t\tif (id === 'title'){\n\t\t\tthis.updated.title = event.target.value;\n\t\t}\n\t\tif (id === 'description'){\n\t\t\tthis.updated.description = event.target.value;\n\t\t}\n\t\tif (id === 'priority'){\n\t\t\tlet text = \"\";\n\t\t\tswitch(event.target.value){\n\t\t\t\tcase \"0\":\n\t\t\t\t\ttext = 'Low';\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"1\":\n\t\t\t\t\ttext = 'Medium';\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"2\":\n\t\t\t\t\ttext = 'High';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttext = 'Medium';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.updated.priority = text;\n\t\t}\n\t}\n\n\t// on submit click\n   handleSubmit = event => {\n\t\tevent.preventDefault();\n\t\tthis.setState({show: false});\n\t//\tvar dueDate = moment().format(this.state.dueDate)\n\t//\tconsole.log(dueDate);\n\t\tfetch(\"/createtask\",\n\t\t{\n\t\t\t\"method\": \"POST\",\n\t\t\t\"body\": JSON.stringify(\n\t\t\t{\n\t\t\t\t\"title\": this.updated.title,\n\t\t\t\t\"dueDate\": this.updated.dueDate,\n\t\t\t\t\"priority\": this.updated.priority,\n\t\t\t\t\"description\": this.updated.description,\n\t\t\t\t\"completed\": false,\n\t\t\t\t\"uhoh\": false,\n\t\t\t\t\"doLater\": false,\n\t\t\t}),\n\t\t\t\"headers\": {\"Content-Type\": \"application/json\"}\n\t\t})\n\t\t.then(window.location.reload());\n   }\n   \n   // cancel and close the card\n   cancel = event => {\n\t   console.log(\"Cancelled\");\n   }\n   \n   handleClose = () => {\n\t\tthis.setState({show: false});\n\t}\n\thandleEdit = () => {\n\t\tthis.setState({show: true});\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t<div className = \"text-center new-task\">\n\t\t<Button variant=\"info\"  onClick = {this.handleEdit}>New Task</Button>\n\t\t <Modal  show={this.state.show} onHide={this.handleClose}>\n\t\t\t<div> \n\t\t\t\t<Card bg=\"info\" text=\"secondary\" style={{ width: '30rem' }}>\n\t\t\t\t   <Card.Header>\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Form.Group controlId=\"taskTitle\">\n\t\t\t\t\t\t\t\t<Form.Control \n\t\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Input Task Title\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.handleChange(\"title\", e)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t<Form.Group className =\"text-right\" controlId = \"dueDateDay\">\n\t\t\t\t\t\t\t<Form.Label>Select a Due Date: </Form.Label>\n\t\t\t\t\t\t\t<input type = 'date' onChange={this.handleDateChange}/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t   </Card.Header>\n\t\t\t\t  <Card.Body>\n\t\t\t\t\t<Form>\t\t\t\t\t\t\n\t\t\t\t\t\t<div className = \"mb-3 text-center\" onChange={(e) => this.handleChange(\"priority\", e)}>\n\t\t\t\t\t\t\t<input type=\"radio\" value='0' name=\"priority\" style={{ margin: '5px' }}/> Low\n\t\t\t\t\t\t\t<input type=\"radio\" value='1' name=\"priority\" style={{ margin: '5px' }}/> Medium\n\t\t\t\t\t\t\t<input type=\"radio\" value='2' name=\"priority\" style={{ margin: '5px' }}/> High\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t<Form.Group controlId=\"description\">\n\t\t\t\t\t\t\t<Form.Label>Task Description</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tas=\"textarea\"\n\t\t\t\t\t\t\t\trows=\"4\"\n\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\tplaceholder=\"Type a description for your task.\"\n\t\t\t\t\t\t\t\tonChange={(e) => this.handleChange(\"description\", e)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form>\n\t\t\t\t\t<ButtonToolbar>\n\t\t\t\t\t\t<Button variant=\"outline-secondary\" style={{ margin: '5px' }} type = \"submit\" onClick = {this.handleSubmit}> Add Task</Button>\n\t\t\t\t\t\t<Button variant=\"outline-secondary\" style={{ margin: '5px' }}onClick = {this.handleClose}>Cancel</Button>\n\t\t\t\t\t</ButtonToolbar>\n\t\t\t\t  </Card.Body>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t </Modal>\n\t\t </div>\n\t\t);\t\n\t}\n}\n\nexport default TaskCardEntry;\n","import React from 'react';\nimport {Button} from 'react-bootstrap';\n\nimport TaskCard from './TaskCard';\nimport TaskCardEntry from './TaskCardEntry';\n\nimport './App.css';\n\nimport './Login.scss'\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      task_head : 0,\n      tasks: [\n        {title: \"hi\", z: 3, description: \"Take your time back. Create a new task.\", priority_text: \"Medium\", date: \"11-22-3333\", hidden: false, id: -1},\n      ],\n    }\n    this.fetchTasks();\n  }\n\n  fetchTasks(){\n    fetch(\"/gettasks\",{\n      method: \"POST\",\n    }).then(res => {\n        res.json()\n      .then((cards) => {\n        for(let i=0; i<cards.length; i++){\n          cards[i].z = -1;\n          cards[i].hidden = true;\n          if(i<4){\n            cards[i].z = 3-i;\n            cards[i].hidden = false;\n          }\n\n          cards[i].priority_text = cards[i].priority;\n          cards[i].date = cards[i].dueDate; \n        }\n        this.setState({tasks: cards, task_head:this.state.task_head})\n      })\n    });\n  }\n\n  removeTopTask(){\n    let tasks = this.state.tasks.slice();\n    let task_head = this.state.task_head;\n\n    for(let i=task_head; i<task_head+4 && i<tasks.length; i++){\n      if(i===task_head){\n        tasks[i].hidden=true;\n      }else{\n        tasks[i].z += 1;\n        tasks[i].z %= 4;\n      }\n    }\n    if(task_head + 4 < tasks.length){\n      tasks[task_head+4].hidden = false;\n      tasks[task_head+4].z = 0;\n    }\n    task_head += 1;\n    this.setState({tasks: tasks, task_head: task_head});\n  }\n\n  updateFrontCard(data){\n    let tasks = this.state.tasks.slice();\n    data.z = 3;\n    data.hidden = false;\n    tasks[this.state.task_head] = data;\n    this.setState({tasks : tasks});\n  }\n\n  /**\n   * Do different things based on the button that has been clicked\n   * @param {Int} button_code 0 done 1 Do Later(not implemented) 2 More Time (not implemented) 3 Edit 4 Delete\n   * @param {Object} data additional data to be used\n   */\n  handleButton(button_code, data=null){\n    switch(button_code){\n      case 0:\n        this.removeTopTask();\n        fetch(\"/edittask\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            id: data,\n            completed: true,\n          }),\n          headers: {\"Content-Type\": \"application/json\"},\n        })\n        break;\n      case 1:\n        break;\n      case 2:\n        break;\n      case 3:\n        fetch(\"/edittask\", {\n          method: \"POST\",\n          body: JSON.stringify(data),\n          headers: {\"Content-Type\": \"application/json\"}\n        })\n        .then(console.log);\n        this.updateFrontCard(data);\n        this.fetchTasks();\n        break;\n      case 4:\n        this.removeTopTask();\n        fetch(\"/deletetask\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            id: data,\n          }),\n          headers: {\"Content-Type\": \"application/json\"},\n        })\n        break;\n      default:\n        break;\n    }\n  }\n\n  renderTaskCard(num){\n    const cards = []\n    for(let i=0; i<num; i+=1){\n      cards.push(<TaskCard \n        data={this.state.tasks[i]}\n        buttonCallback={(b_id, data) => {this.handleButton(b_id, data)}} />)\n    }\n    return (\n      cards\n    )\n  }\n  \n  renderTaskCardEntry(){\n\t  console.log(\"Doing this\");\n\t  \n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderTaskCard(this.state.tasks.length)}\n      </div>\n\t  \n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {Form, FormGroup, ControlLabel, FormControl, inputRef} from 'react-bootstrap';\nimport {Button} from 'react-bootstrap';\n//import './Login.scss';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\n//function Login() {\nclass Login extends React.Component {\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\tusername: \"\",\n\t\tpassword: \"\",\n\t\tsignUpUsername: \"\",\n\t\tsignUpPassword: \"\",\n\t\t};\n    }\n\t\n\t//validates the log in form for blanks\n\tvalidateForm() {\n\t\treturn this.state.username.length > 0 && this.state.password.length > 0;\n    }\n\t\n\t// validates the sign up form for blanks\n\tvalidateSignupForm() {\n\t\treturn this.state.signUpUsername.length > 0 && this.state.signUpPassword.length > 0;\n    }\n\t\n\t// handles text changing in any of the input fields\n    handleChange = event => {\n\t\tthis.setState({\n\t\t  [event.target.id]: event.target.value\n\t\t});\n\t}\n\t\n\t// login submit clicked\n    handleLoginSubmit = event => {\n\t\tevent.preventDefault();\n\t\tfetch(\"/login\",\n\t\t{\n\t\t\t\"method\": \"POST\",\n\t\t\t\"body\": JSON.stringify(\n\t\t\t{\n\t\t\t\t\"username\": this.state.username,\n\t\t\t\t\"password\": this.state.password,\n\t\t\t}),\n\t\t\t\"headers\": {\"Content-Type\": \"application/json\"}\n\t\t})\n\t\t.then(console.log)\n   }\n   \n   // signup submit clicked\n    handleSignUpSubmit = event => {\n\t\tevent.preventDefault();\n\t\tfetch(\"/signup\",\n\t\t{\n\t\t\t\"method\": \"POST\",\n\t\t\t\"body\": JSON.stringify(\n\t\t\t{\n\t\t\t\t\"username\": this.state.signUpUsername,\n\t\t\t\t\"password\": this.state.signUpPassword,\n\t\t\t}),\n\t\t\t\"headers\": {\"Content-Type\": \"application/json\"}\n\t\t})\n\t\t.then(console.log)\n   }\n  \n\t\n\trender()\n\t{\n    return (\n\t<div style= {{margin: '100px'}}> \n\t\t<h2>Existing User Login</h2>\n\t\t<Form onSubmit={this.handleLoginSubmit} >\n\t\t  <Form.Group controlId=\"username\">\n\t\t\t<Form.Label>Username </Form.Label>\n\t\t\t<Form.Control \n\t\t\t\tautoFocus\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Enter Username\"\n\t\t\t\tvalue={this.state.username}\n\t\t\t\tonChange={this.handleChange}\n\t\t\t/>\n\t\t  </Form.Group>\n\n\t\t  <Form.Group controlId=\"password\">\n\t\t\t<Form.Label>Password </Form.Label>\n\t\t\t<Form.Control \n\t\t\t\tautoFocus\n\t\t\t\ttype=\"password\" \n\t\t\t\tplaceholder=\"Enter Password\" \n\t\t\t\tvalue={this.state.password}\n\t\t\t\tonChange={this.handleChange}\n\t\t\t/>\n\t\t  </Form.Group>\n\t\t  <Button disabled={!this.validateForm()}\n            type=\"submit\">Log In</Button>\n\t\t</Form>\n\t\t\n\t\t<h2><br></br>Create a New Account </h2>\n\t\t<Form onSubmit={this.handleSignUpSubmit}>\n\t\t  <Form.Group controlId=\"signUpUsername\">\n\t\t\t<Form.Label>Username </Form.Label>\n\t\t\t<Form.Control \n\t\t\t\tautoFocus\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Create Username\"\n\t\t\t\tvalue={this.state.signUpUsername}\n\t\t\t\tonChange={this.handleChange}\n\t\t\t/>\n\t\t  </Form.Group>\n\n\t\t  <Form.Group controlId=\"signUpPassword\">\n\t\t\t<Form.Label>Password </Form.Label>\n\t\t\t<Form.Control \n\t\t\t\tautoFocus\n\t\t\t\ttype=\"password\" \n\t\t\t\tplaceholder=\"Create Password\" \n\t\t\t\tvalue={this.state.signUpPassword}\n\t\t\t\tonChange={this.handleChange}\n\t\t\t/>\n\t\t  </Form.Group>\n\t\t  <Button disabled={!this.validateSignupForm()}\n            type=\"submit\">Sign Up</Button>\n\t\t</Form>\n\t</div>\n    );\n\t}\n};\n\n\nexport default Login;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './Login';\nimport TaskCard from './TaskCard';\nimport TaskCardEntry from './TaskCardEntry';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<Login />, document.getElementById('login'));\n//ReactDOM.render(<TaskCard />, document.getElementById('card'));\nReactDOM.render(<TaskCardEntry />, document.getElementById('newTask'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}